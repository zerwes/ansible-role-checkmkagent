---

- name: convert deprecated format from list to dict for checkmkagent_required_packages
  ansible.builtin.set_fact:
    checkmkagent_required_packages:
      deprecated: "{{ checkmkagent_required_packages }}"
  when: checkmkagent_required_packages | type_debug == "list"

- name: convert deprecated format from list to dict for check_mk_logwatch_syslog_patterns
  ansible.builtin.set_fact:
    check_mk_logwatch_syslog_patterns:
      deprecated: "{{ check_mk_logwatch_syslog_patterns }}"
  when: check_mk_logwatch_syslog_patterns | type_debug == "list"

- name: convert deprecated format from list to dict for check_mk_plugins
  ansible.builtin.set_fact:
    check_mk_plugins:
      deprecated: "{{ check_mk_plugins }}"
  when: check_mk_plugins | type_debug == "list"

- name: convert deprecated format from list to dict for check_mk_local_plugins
  ansible.builtin.set_fact:
    check_mk_local_plugins:
      deprecated: "{{ check_mk_local_plugins }}"
  when: check_mk_local_plugins | type_debug == "list"

- name: convert deprecated format from list to dict for check_mk_local_cfg
  ansible.builtin.set_fact:
    check_mk_local_cfg:
      deprecated: "{{ check_mk_local_cfg }}"
  when: check_mk_local_cfg | type_debug == "list"

- name: fetch agent page from checkmk server
  delegate_to: localhost
  ansible.builtin.uri:
    url: "{{ checkmk_proto }}://{{ checkmk_hostname }}/{{ checkmk_path }}/"
    return_content: true
  check_mode: false
  register: checkmkagents
  when:
    - checkmk_agent_version is not defined

- name: register agent version from server
  ansible.builtin.set_fact:
    _checkmk_agent_deb: '{{ checkmkagents.content | regex_search("check-mk-agent_[0-9]\.[0-9]\.[0-9]p[0-9]+-1_all.deb") }}'
  when:
    - checkmk_agent_version is not defined
    - not checkmkagents.failed
    - checkmkagents.status == 200

- name: extract version from deb listed by the server
  ansible.builtin.set_fact:
    checkmk_agent_version: '{{ _checkmk_agent_deb | regex_search("[0-9]\.[0-9]\.[0-9]p[0-9]+") }}'
  when:
    - checkmk_agent_version is not defined
    - _checkmk_agent_deb is defined

- name: ensure we could determine the checkmk_agent_version
  ansible.builtin.assert:
    quiet: true
    msg: "checkmk_agent_version can not be determined from server"
    that:
      - checkmk_agent_version is defined
      - checkmk_agent_version | length > 0

- name: fetch {{ checkmk_agent_deb }}
  delegate_to: localhost
  ansible.builtin.get_url:
    url: "{{ checkmk_proto }}://{{ checkmk_hostname }}/{{ checkmk_path }}/{{ checkmk_agent_deb }}"
    dest: "{{ _local_tmp }}/{{ checkmk_agent_deb }}"
    force: false
    mode: "0600"
  when: download_checkmk_agent_deb | default(true)
  tags:
    - molecule-notest

- name: upload {{ checkmk_agent_deb }}
  ansible.builtin.copy:
    src: "{{ _local_tmp }}/{{ checkmk_agent_deb }}"
    dest: /var/tmp/{{ checkmk_agent_deb }}
    force: false
    mode: "0600"
  when: download_checkmk_agent_deb | default(true)
  tags:
    - molecule-notest

- name: Install check_mk agent on Debian-based systems
  ansible.builtin.apt:
    deb: /var/tmp/{{ checkmk_agent_deb }}
  when:
    - ansible_distribution == "Debian" or ansible_distribution == "Ubuntu"
    - not skip_checkmk_agent_deb | default(false)
    - not ansible_check_mode

- name: install required packages
  ansible.builtin.apt:
    name: "{{ checkmkagent_required_packages.values() | list | flatten }}"
    update_cache: true
    cache_valid_time: 3600

- name: purge check-mk-agent-logwatch
  ansible.builtin.apt:
    name: check-mk-agent-logwatch
    state: absent

- name: fail if both variants are configured with the same value
  ansible.builtin.fail:
    msg: "both variants set to {{ check_mk_agent_use_xinetd }}"
  when: check_mk_agent_use_xinetd == check_mk_agent_use_systemd

- name: register check_mk.socket state
  ansible.builtin.systemd:
    name: check_mk.socket
  register: check_mk_socket

- name: stop check_mk.socket
  ansible.builtin.systemd:
    name: check_mk.socket
    state: stopped
    enabled: false
    masked: true
    daemon_reload: true
  when:
    - check_mk_agent_use_xinetd
    - check_mk_socket.status.ActiveState in ['active', 'failed']

- name: register cmk-agent-ctl-daemon state
  ansible.builtin.systemd:
    name: cmk-agent-ctl-daemon
  register: check_mk_agent_ctl_daemon

- name: stop cmk-agent-ctl-daemon
  ansible.builtin.systemd:
    name: cmk-agent-ctl-daemon
    state: stopped
    enabled: false
    masked: true
    daemon_reload: true
  when:
    - check_mk_agent_use_xinetd
    - check_mk_agent_ctl_daemon.status.ActiveState in ['active', 'failed']

- name: install xinetd
  ansible.builtin.apt:
    name: xinetd
    update_cache: true
    cache_valid_time: 3600
  when: check_mk_agent_use_xinetd

- name: install xinetd checkmk service file
  ansible.builtin.template:
    src: check_mk.xinetd.j2
    dest: /etc/xinetd.d/check_mk
    mode: "0644"
  when: check_mk_agent_use_xinetd
  register: _xinetdcfgchanged

- name: remove xinetd checkmk service file
  ansible.builtin.file:
    path: /etc/xinetd.d/check_mk
    state: absent
  when: check_mk_agent_use_systemd
  register: _xinetdcfgremoved

- name: register xinetd desired service state
  ansible.builtin.set_fact:
    _xinetd_service_state: restarted
  when:
    - check_mk_agent_use_systemd or (check_mk_agent_use_xinetd and _xinetdcfgchanged.changed | default(false))

- name: debug _xinetdcfgchanged
  ansible.builtin.debug:
    var: _xinetdcfgchanged

- name: debug _xinetdcfgremoved
  ansible.builtin.debug:
    var: _xinetdcfgremoved

- name: debug _xinetd_service_state
  ansible.builtin.debug:
    var: _xinetd_service_state

- name: ensure xinetd service state is {{ _xinetd_service_state | default('started') }}  # noqa ignore-errors
  ansible.builtin.service:
    name: xinetd
    state: "{{ _xinetd_service_state | default('started') }}"
  ignore_errors: "{{ check_mk_agent_use_systemd }}"
  when:
    - not purge_xinetd | default(False)

- name: purge xinetd
  ansible.builtin.apt:
    name: xinetd
    state: absent
    purge: true
  when:
    - check_mk_agent_use_systemd
    - purge_xinetd | default(False)

- name: start cmk-agent-ctl-daemon
  ansible.builtin.systemd:
    name: cmk-agent-ctl-daemon
    state: started
    enabled: true
    masked: false
    daemon_reload: true
  when:
    - check_mk_agent_use_systemd
    - check_mk_agent_ctl_daemon.status.ActiveState == 'inactive'
    - checkmk_agent_version is version_compare('2.1.0', '>=')

- name: start check_mk.socket
  ansible.builtin.systemd:
    name: check_mk.socket
    state: started
    enabled: true
    masked: false
    daemon_reload: true
  when:
    - check_mk_agent_use_systemd
    - check_mk_socket.status.ActiveState == 'inactive'
    - checkmk_agent_version is version_compare('2.1.0', '<')

- name: Copy check plugins from main check_mk site
  delegate_to: localhost
  ansible.builtin.get_url:
    url: "{{ checkmk_proto }}://{{ checkmk_hostname }}/{{ checkmk_path }}/plugins/{{ item }}"
    dest: "{{ _local_tmp }}/{{ item }}"
    force: false
    mode: "0600"
  when: item | length > 0
  with_items:
    - "{{ check_mk_plugins.values() | list | flatten }}"
    - "{{ check_mk_logwatch_plugin }}"
  check_mode: false
  tags:
    - molecule-notest

- name: "Upload {{ check_mk_logwatch_plugin }} plugin"
  ansible.builtin.copy:
    src: "{{ _local_tmp }}/{{ item }}"
    dest: "/usr/lib/check_mk_agent/plugins/{{ item }}"
    owner: root
    group: root
    mode: "0755"
  with_items: "{{ check_mk_logwatch_plugin }}"
  diff: no
  when: check_mk_logwatch | bool
  tags:
    - molecule-notest

- name: "remove unused logwatch plugin ..."
  ansible.builtin.file:
    path: "/usr/lib/check_mk_agent/plugins/{{ item }}"
    state: absent
  with_items:
    - mk_logwatch.py
    - mk_logwatch_2.py
  when:
    - not (check_mk_logwatch | bool and check_mk_logwatch_plugin == item)

- name: "{{ check_mk_logwatch_plugin }} requires python2"
  ansible.builtin.apt:
    name: python2
  when:
    - check_mk_logwatch
    - check_mk_logwatch_plugin == 'mk_logwatch_2.py'

- name: Configure logwatch plugin
  ansible.builtin.template:
    src: check_mk_logwatch.cfg.j2
    dest: /etc/check_mk/logwatch.cfg
    owner: root
    group: root
    mode: "0644"
  when: check_mk_logwatch | bool

- name: Upload check plugins
  ansible.builtin.copy:
    src: "{{ _local_tmp }}/{{ item }}"
    dest: "/usr/lib/check_mk_agent/plugins/{{ item }}"
    owner: root
    group: root
    mode: "0755"
  with_items: "{{ check_mk_plugins.values() | list | flatten }}"

- name: Remove check plugins
  ansible.builtin.file:
    path: "/usr/lib/check_mk_agent/plugins/{{ item }}"
    state: absent
  with_items: "{{ check_mk_plugins_remove.values() | list | flatten }}"

- name: Copy local check_mk cfg files
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "/etc/check_mk/{{ item | basename }}"
    owner: root
    group: root
    mode: "0400"
  when: item | length > 0
  with_items: "{{ check_mk_local_cfg.values() | list | flatten }}"

- name: Copy local check_mk cfg templates
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "/etc/check_mk/{{ item | basename }}"
    owner: root
    group: root
    mode: "0400"
  when: item | length > 0
  with_items: "{{ check_mk_local_cfg_templates.values() | list | flatten }}"

- name: Copy local check_mk checks
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "/usr/lib/check_mk_agent/local/{{ item | basename }}"
    owner: root
    group: root
    mode: "0755"
  when: item | length > 0
  with_items: "{{ check_mk_local_plugins.values() | list | flatten }}"

- name: Copy local check_mk templated checks
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: "/usr/lib/check_mk_agent/local/{{ item | basename }}"
    owner: root
    group: root
    mode: "0755"
  when: item | length > 0
  with_items: "{{ check_mk_local_plugins_template.values() | list | flatten }}"

- name: Remove local check_mk checks
  ansible.builtin.file:
    path: "/usr/lib/check_mk_agent/local/{{ item | basename }}"
    state: absent
  when: item | length > 0
  with_items: "{{ check_mk_local_plugins_remove.values() | list | flatten }}"

- name: Register host on checkmk server
  throttle: 1
  # we use a block statement as 'throttle' is not a valid attribute for a TaskInclude
  block:
    - name: Register host on checkmk server
      tags:
        - always
      ansible.builtin.include_tasks:
        file: register.yml
        apply:
          tags:
            - checkmk_agent_register
      when:
        - check_mk_agent_use_systemd
        - checkmk_agent_register or checkmk_agent_register_proxy

# vim: tabstop=2 expandtab shiftwidth=2 softtabstop=2 smartindent nu ft=yaml
